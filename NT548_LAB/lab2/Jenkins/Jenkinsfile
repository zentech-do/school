pipeline {
    agent any

    environment {
        registry = "asdloc098l"
        registryCredential = 'dockerhub-nhom17'
        dockerImageTag = 'latest'
        scannerHome = tool 'sonarqube'
    }

    stages {

        stage('Build') {
            steps {
                bat 'mvn clean package -DskipTests'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def services = [
                        'order-service',
                        'notification-service',
                        'api-gateway',
                        'discovery-server',
                        'product-service',
                        'inventory-service'
                    ]

                    services.each { service ->
                        withSonarQubeEnv('sonarqube') {
                            bat """
                                ${scannerHome}/bin/sonar-scanner ^
                                -Dsonar.projectKey=microservice ^
                                -Dsonar.projectName=microservice ^
                                -Dsonar.projectVersion=1.0 ^
                                -Dsonar.sources=./${service}/src ^
                                -Dsonar.language=java ^
                                -Dsonar.java.binaries=./${service}/target/classes
                            """
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = [
                        'order-service',
                        'notification-service',
                        'api-gateway',
                        'discovery-server',
                        'product-service',
                        'inventory-service'
                    ]

                    services.each { service ->
                        def dockerImage = docker.build("${registry}/${service}:${dockerImageTag}", "./${service}")
                    }
                }
            }
        }

        stage('Upload Images') {
            steps {
                script {
                    def services = [
                        'order-service',
                        'notification-service',
                        'api-gateway',
                        'discovery-server',
                        'product-service',
                        'inventory-service'
                    ]

                    services.each { service ->
                        def dockerImage = docker.build("${registry}/${service}:${dockerImageTag}", "./${service}")
                        docker.withRegistry('', registryCredential) {
                            dockerImage.push("${dockerImageTag}")
                            dockerImage.push('latest')
                        }
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    bat """
                        docker compose up -d
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully.'
            echo 'All stages completed successfully: Build, SonarQube Analysis, Docker Image Build, Image Upload, and Docker Compose Deployment.'
        }
        failure {
            echo 'Pipeline failed during execution.'
            echo 'Please check the logs for details.'
        }
        always {
            echo 'Cleaning up after execution...'
            // Add any clean-up steps here if necessary
        }
    }
}
